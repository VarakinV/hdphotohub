// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  image         String?
  emailVerified DateTime?

  avatarUrl String?
  adminSlug String? @unique

  role               Role                 @default(REALTOR)
  realtorId          String?
  realtor            Realtor?             @relation("RealtorMembers", fields: [realtorId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdRealtors    Realtor[]            @relation("RealtorCreatedBy")
  invitesSent        Invitation[]         @relation("InvitesBy")
  PasswordResetToken PasswordResetToken[]

  // Admin ↔ Realtors assignments (as Admin)
  managedRealtors       RealtorAssignment[]     @relation("AdminRealtors")
  ServiceCategory       ServiceCategory[]
  Service               Service[]
  Tax                   Tax[]
  Booking               Booking[]
  AdminAvailabilityRule AdminAvailabilityRule[]
  BlackoutDate          BlackoutDate[]
  CalendarAccount       CalendarAccount[]
  AdminBookingSettings  AdminBookingSettings?
  PromoCode             PromoCode[]
  Account               Account[]
  Session               Session[]
}

model Realtor {
  id           String       @id @default(cuid())
  firstName    String
  lastName     String
  email        String       @unique
  phone        String?
  headshot     String? // S3 URL for headshot image
  companyName  String?
  companyLogo  String?
  facebookUrl  String?
  linkedinUrl  String?
  instagramUrl String?
  youtubeUrl   String?
  twitterUrl   String?
  pinterestUrl String?
  vimeoUrl     String?
  tiktokUrl    String?
  points       Int          @default(0)
  userId       String // Admin who created this realtor
  user         User         @relation("RealtorCreatedBy", fields: [userId], references: [id])
  users        User[]       @relation("RealtorMembers") // Users (REALTOR role) linked to this Realtor
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orders       Order[]
  invites      Invitation[] @relation("RealtorInvites")

  // Realtors ↔ Admins assignments (as Realtor)
  assignedAdmins RealtorAssignment[] @relation("RealtorAdmins")
  Booking        Booking[]
}

model RealtorAssignment {
  id        String   @id @default(cuid())
  adminId   String
  realtorId String
  createdAt DateTime @default(now())

  admin   User    @relation("AdminRealtors", fields: [adminId], references: [id])
  realtor Realtor @relation("RealtorAdmins", fields: [realtorId], references: [id])

  @@unique([adminId, realtorId])
}

model Order {
  id        String      @id @default(cuid())
  realtorId String
  realtor   Realtor     @relation(fields: [realtorId], references: [id])
  slug      String      @unique
  status    OrderStatus @default(DRAFT)

  // Property info
  propertyAddress          String
  propertyFormattedAddress String?
  propertyLat              Float?
  propertyLng              Float?
  propertyCity             String?
  propertyProvince         String?
  propertyPostalCode       String?
  propertyCountry          String?
  propertyPlaceId          String?

  // Public display overrides (do not affect map/location)
  propertyAddressOverride    String?
  propertyCityOverride       String?
  propertyPostalCodeOverride String?

  propertySize       Int?
  yearBuilt          Int?
  mlsNumber          String?
  listPrice          Int?
  bedrooms           String?
  bathrooms          String?
  featuresText       String?
  description        String?
  appliedPromoCodeId String?
  discountCents      Int        @default(0)
  appliedPromoCode   PromoCode? @relation(fields: [appliedPromoCodeId], references: [id])

  // Media relations
  photos        Photo[]
  videos        Video[]
  floorPlans    FloorPlan[]
  attachments   Attachment[]
  embeds        Embed[]
  propertyPages PropertyPage[]
  inquiries     PropertyInquiry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String // original S3 URL
  urlMls    String? // resized MLS version
  filename  String
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  @@index([orderId, sortOrder])
}

model Video {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String
  filename  String
  createdAt DateTime @default(now())
}

model FloorPlan {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String
  filename  String
  createdAt DateTime @default(now())
}

model Attachment {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String
  filename  String
  createdAt DateTime @default(now())
}

model Embed {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  title     String
  embedUrl  String
  createdAt DateTime @default(now())
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  realtorId   String?
  realtor     Realtor?  @relation("RealtorInvites", fields: [realtorId], references: [id])
  role        Role
  tokenHash   String
  expiresAt   DateTime
  acceptedAt  DateTime?
  invitedById String
  invitedBy   User      @relation("InvitesBy", fields: [invitedById], references: [id])
  createdAt   DateTime  @default(now())
}

model PropertyPage {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  template  Int
  urlPath   String
  published Boolean  @default(true)
  createdAt DateTime @default(now())
}

model PropertyInquiry {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  name      String
  email     String
  phone     String?
  message   String
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum OrderStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  SUPERADMIN
  ADMIN
  REALTOR
}

// Booking system enums and core service models (Milestone 1)

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model ServiceCategory {
  id          String    @id @default(cuid())
  adminId     String
  admin       User      @relation(fields: [adminId], references: [id])
  name        String
  slug        String
  description String?
  iconUrl     String?
  iconKey     String?
  featured    Boolean   @default(false)
  active      Boolean   @default(true)
  sortOrder   Int       @default(0)
  services    Service[]

  @@unique([adminId, slug])
  @@index([adminId, name])
  @@index([adminId, sortOrder])
}

model Service {
  id               String             @id @default(cuid())
  adminId          String
  admin            User               @relation(fields: [adminId], references: [id])
  categoryId       String
  category         ServiceCategory    @relation(fields: [categoryId], references: [id])
  name             String
  slug             String
  description      String?
  priceCents       Int
  durationMin      Int
  bufferBeforeMin  Int                @default(0)
  bufferAfterMin   Int                @default(0)
  minSqFt          Int?
  maxSqFt          Int?
  active           Boolean            @default(true)
  sortOrder        Int                @default(0)
  taxes            ServiceTax[]
  bookingItems     BookingService[]
  PromoCodeService PromoCodeService[]

  @@unique([adminId, slug])
  @@index([adminId, sortOrder])
}

model Tax {
  id       String       @id @default(cuid())
  adminId  String
  admin    User         @relation(fields: [adminId], references: [id])
  name     String
  rateBps  Int // 5% => 500
  active   Boolean      @default(true)
  services ServiceTax[]

  @@unique([adminId, name])
  @@index([adminId, active])
}

model ServiceTax {
  serviceId String
  taxId     String

  service Service @relation(fields: [serviceId], references: [id])
  tax     Tax     @relation(fields: [taxId], references: [id])

  @@id([serviceId, taxId])
}

// Booking, availability, and integrations (Milestone 1)

model Booking {
  id        String        @id @default(cuid())
  adminId   String
  admin     User          @relation(fields: [adminId], references: [id])
  realtorId String?
  realtor   Realtor?      @relation(fields: [realtorId], references: [id])
  status    BookingStatus @default(PENDING)
  start     DateTime
  end       DateTime
  timeZone  String

  // Property & location
  propertyAddress          String
  propertyFormattedAddress String?
  propertyLat              Float?
  propertyLng              Float?
  propertyCity             String?
  propertyProvince         String?
  propertyPostalCode       String?
  propertyCountry          String?
  propertyPlaceId          String?
  propertySizeSqFt         Int?

  // Contact
  contactName  String
  contactEmail String
  contactPhone String?
  notes        String?

  // Pricing snapshot
  subtotalCents      Int        @default(0)
  taxCents           Int        @default(0)
  totalCents         Int        @default(0)
  // Promo code application
  appliedPromoCodeId String?
  appliedPromoCode   PromoCode? @relation(fields: [appliedPromoCodeId], references: [id])
  promoCodeCode      String?
  discountCents      Int        @default(0)

  // Calendar integration
  googleEventId String?

  items     BookingService[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([adminId, start, end])
  @@index([realtorId])
}

model BookingService {
  id        String @id @default(cuid())
  bookingId String
  serviceId String

  booking Booking @relation(fields: [bookingId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  // Snapshots for historical accuracy
  serviceName    String
  unitPriceCents Int
  taxCents       Int    @default(0)
}

model AdminAvailabilityRule {
  id           String  @id @default(cuid())
  adminId      String
  admin        User    @relation(fields: [adminId], references: [id])
  dayOfWeek    Int // 0=Sun ... 6=Sat
  startMinutes Int // minutes since midnight
  endMinutes   Int
  timeZone     String
  active       Boolean @default(true)

  @@index([adminId, dayOfWeek])
}

model BlackoutDate {
  id      String   @id @default(cuid())
  adminId String
  admin   User     @relation(fields: [adminId], references: [id])
  start   DateTime
  end     DateTime
  reason  String?

  @@index([adminId, start, end])
}

model CalendarAccount {
  id           String    @id @default(cuid())
  adminId      String
  admin        User      @relation(fields: [adminId], references: [id])
  provider     String    @default("google")
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?

  @@unique([adminId, provider])
}

// Promo codes

enum PromoDiscountType {
  PERCENT
  AMOUNT
}

model PromoCode {
  id                 String             @id @default(cuid())
  adminId            String
  admin              User               @relation(fields: [adminId], references: [id])
  displayName        String
  code               String
  startDate          DateTime?
  endDate            DateTime?
  maxUsesPerRealtor  Int?
  maxUsesTotal       Int?
  discountType       PromoDiscountType
  discountRateBps    Int?
  discountValueCents Int?
  active             Boolean            @default(true)
  services           PromoCodeService[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  Order              Order[]
  Booking            Booking[]

  @@unique([adminId, code])
}

model PromoCodeService {
  promoCodeId String
  serviceId   String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])

  @@id([promoCodeId, serviceId])
}

model AdminBookingSettings {
  id               String  @id @default(cuid())
  adminId          String  @unique
  admin            User    @relation(fields: [adminId], references: [id])
  timeZone         String
  leadTimeMin      Int     @default(0)
  maxAdvanceDays   Int     @default(60)
  defaultBufferMin Int     @default(0)
  googleCalendarId String?
}

// Auth.js Prisma Adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
