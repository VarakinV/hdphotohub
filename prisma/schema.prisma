// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String
  name      String?
  image     String?
  avatarUrl String?

  role               Role                 @default(REALTOR)
  realtorId          String?
  realtor            Realtor?             @relation("RealtorMembers", fields: [realtorId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdRealtors    Realtor[]            @relation("RealtorCreatedBy")
  invitesSent        Invitation[]         @relation("InvitesBy")
  PasswordResetToken PasswordResetToken[]
}

model Realtor {
  id        String       @id @default(cuid())
  firstName String
  lastName  String
  email     String       @unique
  phone     String?
  headshot  String? // S3 URL for headshot image
  userId    String // Admin who created this realtor
  user      User         @relation("RealtorCreatedBy", fields: [userId], references: [id])
  users     User[]       @relation("RealtorMembers") // Users (REALTOR role) linked to this Realtor
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  orders    Order[]
  invites   Invitation[] @relation("RealtorInvites")
}

model Order {
  id        String      @id @default(cuid())
  realtorId String
  realtor   Realtor     @relation(fields: [realtorId], references: [id])
  slug      String      @unique
  status    OrderStatus @default(DRAFT)

  // Property info
  propertyAddress String
  propertySize    Int?
  yearBuilt       Int?
  mlsNumber       String?
  listPrice       Int?
  bedrooms        Int?
  bathrooms       Int?
  description     String?

  // Media relations
  photos      Photo[]
  videos      Video[]
  floorPlans  FloorPlan[]
  attachments Attachment[]
  embeds      Embed[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String // original S3 URL
  urlMls    String? // resized MLS version
  filename  String
  createdAt DateTime @default(now())
}

model Video {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String
  filename  String
  createdAt DateTime @default(now())
}

model FloorPlan {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String
  filename  String
  createdAt DateTime @default(now())
}

model Attachment {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  url       String
  filename  String
  createdAt DateTime @default(now())
}

model Embed {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  title     String
  embedUrl  String
  createdAt DateTime @default(now())
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  realtorId   String?
  realtor     Realtor?  @relation("RealtorInvites", fields: [realtorId], references: [id])
  role        Role
  tokenHash   String
  expiresAt   DateTime
  acceptedAt  DateTime?
  invitedById String
  invitedBy   User      @relation("InvitesBy", fields: [invitedById], references: [id])
  createdAt   DateTime  @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum OrderStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  SUPERADMIN
  ADMIN
  REALTOR
}
